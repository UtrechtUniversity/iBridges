# Developer guide

## Submitting issues
If you want to report a bug please make sure to mention:
- Software version or branch you are working on
- Steps to reproduce the behaviour
- Expected behaviour

If you have an idea for a new feature, please let us also know through an issue

<p align="center">
  <p align="center">
    <a href="https://github.com/chStaiger/iBridges-Gui/issues">Report Bug or request feature</a>
    .
  </p>
</p>

## Extending iBridges: Create own tab
Each tab in the GUI is an own class. If you want to create your own tab, please follow the steps below.

::: {.callout-note collapse="true"}
### 1. Create a ui-file
To ease the layouting of the new tab we recommend to use the QT-designer. Please choose **Qt Designer Form** and the template **Widget**. 

![](../screenshots/create-ui-file.png){fig-align="center" height=300}

Set the **Path** to *\<iBridges-Gui/gui/ui-files\>* 

To ensure the same color theme, right-click on **Form** and choose change stylesheet. 

![](../screenshots/colortheme-ui-file.png){fig-align="center" width=300}

Copy the following text over to the window.

```py
QWidget
{
	background-color: rgb(54, 54, 54);
	color: rgb(86, 184, 139);
    border-color: rgb(217, 174, 23);
}

QLineEdit
{
	background-color: rgb(85, 87, 83);
	border-color: rgb(217, 174, 23);
}

QTreeView
{
background-color: rgb(85, 87, 83);
}

QLabel#error_label
{
	color: rgb(217, 174, 23);
}
```

The *errorLabel* is specific object, while the settings for *Qwidget*, *QLineEdit* and *QTreeView* are valid for all objects of that type.

Now you can design your new form. In our example our form contains a placeholder for the iRODS tree, a text field (green text) and an error label (yellow text). 


![](../screenshots/layout-ui-file.png){fig-align="center" height=300}

In the designer you also set the variable names of the objects. These will be used in the python code, so make sure they are meaningful to you.

![](../screenshots/variables-ui-file.png){fig-align="center"}

:::

::: {.callout-note collapse="true"}
### 2. Convert the ui-file into python code
Convert the ui-file to python file with:

```py
cd iBridges-Gui
python -m PyQt6.uic.pyuic -x gui/ui_files/ExampleTab.ui -o gui/ui_files/ExampleTab.py
```
In some cases a standard class name is set in the python file.

```py
# Form implementation generated from reading ui file 'gui/ui_files/example_tab.ui'
#
# Created by: PyQt6 UI code generator 6.3.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets


class Ui_Form(object):
    def setupUi(self, Form):
        Form.setObjectName("Form")
        ...
``` 
You can change the class name *Ui_Form* to something more meaningful. In this example we rename the class to **Ui_ExampleTab**.

For the software package to find the layout for the new tab, we need to add it to the *iBridges/gui/ui_files/__init__.py*.
Add the line:
```py
from . import ExampleTab
```
:::

::: {.callout-note collapse="true"}
### 3. Integrate the new tab into iBridges
- Create a new python class *iBridges/gui/IrodsExampleTab.py* with the following content:
	
	```py
	import logging
	import sys

	import irods.exception
	import PyQt6.QtCore
	import PyQt6.QtGui
	import PyQt6.QtWidgets
	import PyQt6.uic

	import gui
	import meta
	import utils

	class IrodsExampleTab(PyQt6.QtWidgets.QWidget, gui.ui_files.ExampleTab.Ui_ExampleTab):
    context = utils.context.Context()
    def __init__(self):
        super().__init__()
        if getattr(sys, 'frozen', False):
            super().setupUi(self)
        else:
            PyQt6.uic.loadUi("gui/ui_files/ExampleTab.ui", self)
        print("Whooohoo")
	```
- Add `from . import IrodsExampleTab` to *iBridges/gui/__init__.py*

:::

::: {.callout-note collapse="true"}
### 4. Integrate the new tab class into *mainmenu.py*
In the file *iBridges/gui/mainmenu.py* you will find the dictionary `ui_tabs_lookup`. The dictionary maps from `<tabname>` (as used in *ibridges_config.json*) to a function in mainmeny.py which initialises the tab.
First we will add the new name:

```py
ui_tabs_lookup = {
	'tabBrowser': self.setupTabBrowser,
   	...
   	'tabInfo': self.setupTabInfo,
	'tabExample': self.setupTabExample
}
```

Now we need to write the function `setupTabExample`
Add the new function below `setupTabBrowser`:

```py
    def setupTabExample(self):
        self.exampleTab = gui.ExampleTab.ExampleTab()
        self.tabWidget.addTab(self.exampleTab, 'Example')
```
Don't forget to add the new keyword to the tabs in your *ibridges_config.json*

Now the new tab should appear as last tab in the application and we can continue definning its behaviour.
:::

::: {.callout-note collapse="true"}
### 5. Defining the functionality of the new tab 

You migt have observed that we already defined a variable `context` as a global variable. The class `utils.context.Context` contains all parameters from the *irods_environment.json*, *ibridges_config.json* and it contains an object `context.irods_connector`.

```py
import utils
context = utils.context.Context()
dir(context)

[
 'application_name',
 'ibridges_conf_file',
 'ibridges_configuration',
 'ienv_is_complete',
 'irods_connector',
 'irods_env_file',
 'irods_environment',
 'reset',
 'save_ibridges_configuration',
 'save_irods_environment']
```
The class `Context` is a singleton, i.e. no matter how often you instantiate a `Context` object
 there will just be one object in memory.

```py
context = utils.context.Context()
context1 = utils.context.Context()

context == context1
True
``` 

That also means that if you change the values in the object, all other classes using `Context` will have the same information.

`irods_connector` contains all functionality to interact with the iRODS server.

With all that you can define the functionality of the tab, e.g.:

```py
import PyQt6.QtCore
import PyQt6.QtGui
import PyQt6.QtWidgets
import PyQt6.uic

import gui
import meta
import utils
from gui.irodsTreeView import IrodsModel

class IrodsExampleTab(PyQt6.QtWidgets.QWidget,
                   gui.ui_files.ExampleTab.Ui_ExampleTab):
    context = utils.context.Context()
    def __init__(self):
        super().__init__()
        if getattr(sys, 'frozen', False):
            super().setupUi(self)
        else:
            PyQt6.uic.loadUi("gui/ui_files/ExampleTab.ui", self)
        self.error_label.setText("Whooohoo")

        self._initialize_irods_model(self.irodsTreeView)
        self.irodsTreeView.clicked.connect(self.treeFunction)

    def _initialize_irods_model(self, treeView):
        self.irodsmodel = IrodsModel(treeView)
        treeView.setModel(self.irodsmodel)
        irodsRootColl = self.context.irods_environment.config.get(
                'irods_home', '/'+self.context.irods_connector.zone)
        self.irodsmodel.setHorizontalHeaderLabels([irodsRootColl,
                                              'Level', 'iRODS ID',
                                              'parent ID', 'type'])
        treeView.expanded.connect(self.irodsmodel.refresh_subtree)
        treeView.clicked.connect(self.irodsmodel.refresh_subtree)
        self.irodsmodel.init_tree()

        treeView.setHeaderHidden(True)
        treeView.header().setDefaultSectionSize(180)
        treeView.setColumnHidden(1, True)
        treeView.setColumnHidden(2, True)
        treeView.setColumnHidden(3, True)
        treeView.setColumnHidden(4, True)

    def _get_paths_from_trees(self, treeView, local=False):
        index = treeView.selectedIndexes()[0]
        if local:
            path = self.localmodel.filePath(index)
        else:
            path = self.irodsmodel.irods_path_from_tree_index(index)
        return(index, path)

    def treeFunction(self):
        index, path = self._get_paths_from_trees(self.irodsTreeView)
        self.textField.setText(path)

        return(index, path)
```

:::

## Contributing to the code base
If you want to contribute to the iBridges code base, you can submit pull requests. 

